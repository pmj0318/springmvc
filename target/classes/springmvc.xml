<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"               xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <!--注解扫描 在xml配置了这个标签后，spring可以自动去扫描base-pack下面所有的类，如果扫描到有@Component @Controller @Service等这些注解的类，则把这些类注册为bean -->
  <!--开启扫描, 十九是逗号就是扫描多个-->
    <context:component-scan base-package="controller,serviceImpl"/>

    <!--开启注解驱动-->
    <!--注解驱动，当使用mvc:view-controller标签时一定要加入mvc:annotation-driven，不然会使requestMapping失效。
    当为了处理静态资源问题而加入mvc:default-servlet-handler时，也一定要加入mvc:annotation-driven，不然requestMapping同样会失效。 -->

    <mvc:annotation-driven />

    <!-- 启动AspectJ自动代理 -->
    <!--事务,在也属于aop的体现.就是moidfy,就是是不能体现的,也就是会报异常可以尝试一下就是会包-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>


    <!--对静态资源不进行处理，例如js,css,jpg等等 -->
    <mvc:default-servlet-handler />

    <!--将/WEB-INF/static/目录映射为/ resource /目录，**为了访问私有资源
    所以在WEB-INF下的jsp文件夹的jsp文件,引入静态资源只需要这样:<script src=”resource/js/jquery.1.9.1.js”></script>   <link href=”resource/css/my.css”> -->
    <mvc:resources location="/WEB-INF/resource/"  mapping="/resource/**"  />





    <!--视图解析器,以下配置后，Controller最终返回该页面的前缀-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          id="internalResourceViewResolver">

        <!-- 前缀 -->
        <property name="prefix" value="/WEB-INF/jsp/" />
        <!-- 后缀 -->
        <property name="suffix" value=".jsp" />
    </bean>

   <!--定义一个异常-->
   <!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="defaultErrorView" value="error"/>
        <property name="exceptionMappings">
            <props>
                <prop key="exception.MyException"> /error </prop>
            </props>
            &lt;!&ndash; 还可以定义其他的自定义异常 &ndash;&gt;
        </property>
    </bean>-->


    <!--<mvc:interceptors>

        <mvc:interceptor>
            &lt;!&ndash;/*表示拦截所有请求,如果想拦截以某个名字(abc)结尾的请求path里写/*/abc,如果想拦截以某个名字(abc)开头的请求,path里写/abc/* &ndash;&gt;
            <mvc:mapping path="/*" />
            &lt;!&ndash; 排除拦截的地址 &ndash;&gt;
            &lt;!&ndash;  <mvc:exclude-mapping path="/*/login"/> 不拦截login结尾的请求 &ndash;&gt;
            <bean id="commonInterceptor" class="interceptor.MyInterceptor "></bean> &lt;!&ndash;这个类就是我们自定义的Interceptor &ndash;&gt;
        </mvc:interceptor>
        &lt;!&ndash; 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法  &ndash;&gt;

    </mvc:interceptors>-->

  <!--  <mvc:interceptors>
        <mvc:interceptor>
            &lt;!&ndash;/*表示拦截所有请求,如果想拦截以某个名字(abc)结尾的请求path里写/*/abc,如果想拦截以某个名字(abc)开头的请求,path里写/abc/* &ndash;&gt;
            <mvc:mapping path="/*" />
            &lt;!&ndash; 排除拦截的地址 &ndash;&gt;
            &lt;!&ndash;  <mvc:exclude-mapping path="/*/login"/> 不拦截login结尾的请求 &ndash;&gt;
            <bean id="commonInterceptor2" class="interceptor.MyInterceptor2 "></bean> &lt;!&ndash;这个类就是我们自定义的Interceptor &ndash;&gt;
        </mvc:interceptor>
    </mvc:interceptors>-->

    <!--及xml里指明切面-->
 <!--   <bean id="myAs" class="aspect.MyAspect2"></bean>-->

    <!--aop:config标签用来配置有关切面的配置  -->
    <!--<aop:config>
        &lt;!&ndash; 设置切点表达式 以便下面引用 &ndash;&gt;
        <aop:pointcut expression="execution(* controller.*.*(..))" id="cut"/>
        &lt;!&ndash; 配置切面所用的bean 和优先级 &ndash;&gt;
        <aop:aspect ref="myAs" order="2" >
            &lt;!&ndash; 配置切面方法 &ndash;&gt;
            <aop:before method="beforeCheck" pointcut-ref="cut"/>
            <aop:after method="afterCheck"  pointcut-ref="cut"/>
            <aop:after-returning method="afterReturn" pointcut-ref="cut" returning="res"/>
            <aop:after-throwing method="afterThrow" pointcut-ref="cut" throwing="ex"/>
            <aop:around method="around" pointcut-ref="cut"/>
        </aop:aspect>

    </aop:config>
-->

</beans>
